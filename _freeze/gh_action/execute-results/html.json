{
  "hash": "820b6c1ddc1dbe577a56b13513148c65",
  "result": {
    "engine": "knitr",
    "markdown": "# 깃헙 액션\n\n깃헙 액션(GitHub Action)은 깃헙에서 제공하는 CI/CD 서비스입니다. 깃헙 저장소에 푸시가 발생하면 깃헙 액션을 통해 빌드, 테스트, 배포 등의 작업을 자동화할 수 있다.\n\n\n\n\n\n```{mermaid}\ngraph TD\n    A[시작] --> B[웹사이트 데이터 스크래핑]\n    B --> C[데이터를 CSV 파일로 저장]\n    C --> D[데이터 처리]\n    D --> E[결과를 핸드폰 메시지로 전송]\n\n    subgraph 스크래핑 및 저장\n        B --> F1[필요한 라이브러리 로드]\n        F1 --> F2[URL 정의]\n        F2 --> F3[rvest 등으로 데이터 추출]\n        F3 --> F4[데이터 정리 및 구조화]\n        F4 --> F5[데이터를 CSV로 저장]\n    end\n\n    subgraph 데이터 처리\n        D --> G1[CSV 파일 로드]\n        G1 --> G2[데이터 분석 수행]\n        G2 --> G3[요약 또는 결과 생성]\n    end\n\n    subgraph 메시지 전송\n        E --> H1[메시징 패키지 설치 및 로드]\n        H1 --> H2[메시지 포맷팅]\n        H2 --> H3[API 또는 서비스를 통해 메시지 전송]\n    end\n```\n\n\n\n# 크로링\n\n## 주식가격\n\n[네이버 금융 크롤링](https://velog.io/@sae0912/%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81-%EB%84%A4%EC%9D%B4%EB%B2%84-%EA%B8%88%EC%9C%B5-%ED%81%AC%EB%A1%A4%EB%A7%81) 파이썬 코드를 참고하여 챗GPT로 코드를 동작하는 코드를 생성한다.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_stock_info(stock_code):\n    url = f\"https://finance.naver.com/item/main.nhn?code={stock_code}\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Attempt to extract the stock name with a more robust approach\n    company_info = soup.find(\"div\", {\"class\":\"h_company\"})\n    stock_name = company_info.find(\"a\").text\n\n    # Find the element containing the current price\n    current_price_container = soup.find(\"p\", {\"class\": \"no_today\"})\n    current_price = current_price_container.find(\"span\", {\"class\": \"blind\"}).get_text() if current_price_container else \"Price not found\"\n\n    return stock_name, current_price\n\n# Example usage\nstock_code = '005930'  # Samsung Electronics code\nstock_name, current_price = get_stock_info(stock_code)\nprint(f\"{stock_name} (code {stock_code}) 현재가격: {current_price} KRW.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n삼성전자 (code 005930) 현재가격: 74,900 KRW.\n```\n\n\n:::\n:::\n\n\n\n> ### R 코드로 변환\n>\n> 프롬프트: 다음 코드를 R 코드로 변환해줘\n\n인코딩 이슈가 있어 `read_html()`에서 다음과 같이 변환한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'rvest' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nget_stock_info <- function(stock_code) {\n  url <- sprintf(\"https://finance.naver.com/item/main.nhn?code=%s\", stock_code)\n  webpage <- read_html(url,  encoding = \"euc-kr\")  # Setting the encoding to EUC-KR\n  \n  # Attempt to extract the stock name with a more robust approach\n  company_info <- html_node(webpage, \"div.h_company\")\n  stock_name <- html_text(html_node(company_info, \"a\"))\n\n  # Find the element containing the current price\n  current_price_container <- html_node(webpage, \"p.no_today\")\n  if (!is.null(current_price_container)) {\n    current_price <- html_text(html_node(current_price_container, \"span.blind\"))\n  } else {\n    current_price <- \"Price not found\"\n  }\n  \n  list(stock_name = stock_name, current_price = current_price)\n}\n\n# Example usage\nstock_code <- '005930'  # Samsung Electronics code\ninfo <- get_stock_info(stock_code)\ncat(sprintf(\"%s (code %s) 현재가격: %s KRW.\\n\", info$stock_name, stock_code, info$current_price))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n삼성전자 (code 005930) 현재가격: 74,900 KRW.\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}