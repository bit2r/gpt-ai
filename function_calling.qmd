# 함수 호출

**함수 호출(function calling)**은 대규모 언어 모델(LLM)의 능력을 확장하고 특정 작업을 수행하는 강력한 메커니즘이다. LLM은 사용자의 입력을 분석하고, 적절한 함수를 선택하여 필요한 매개변수와 함께 호출한다. 이 과정을 통해 LLM은 실시간 데이터 검색, 계산 수행, 외부 시스템과의 상호작용 등 다양한 작업을 수행할 수 있다. 함수 호출은 LLM의 자연어 처리 능력과 구조화된 작업 수행 능력을 결합하여, 더 정확하고 맥락에 맞는 응답을 생성한다.

함수 호출의 주요 장점은 유연성과 확장성에 있다. 개발자는 특정 도메인이나 사용 사례에 맞는 사용자 정의 함수를 정의할 수 있으며, 이를 통해 LLM의 기능을 크게 확장할 수 있다. 예를 들어, 날씨 정보 검색, 데이터베이스 쿼리, 예약 시스템 접근 등 다양한 기능을 LLM에 통합할 수 있다.


```{mermaid}
%%| label: function-calling
%%| fig-align: center
graph TB
    A[사용자 입력] -->|자연어| B[LLM이 입력 처리]
    
    subgraph LLM_처리["LLM 처리 과정"]
        B --> C{함수 필요?}
        C -->|예| D[적절한 함수 선택]
        C -->|아니오| E[직접 응답 생성]
        D --> F[함수 매개변수 준비]
    end
    
    subgraph 함수_호출["함수 호출 과정"]
        F --> G[함수 호출]
        G --> H[함수 출력 수신]
    end
    
    subgraph 응답_생성["응답 생성 과정"]
        H --> I[출력을 응답에 통합]
        E --> J[최종 응답 생성]
        I --> J
    end
    
    J --> K[사용자에게 응답 반환]
```

## JSON 출력

함수 호출을 JSON 형식으로 구조화하는 것은 데이터의 일관성과 해석의 용이성을 크게 향상시킨다. JSON은 인간과 기계 모두가 쉽게 읽고 이해할 수 있는 형식으로, 복잡한 데이터 구조를 명확하게 표현할 수 있어, 특히 다양한 유형의 정보를 포함하는 함수 호출에서 매우 유용하며, 파라미터의 이름과 값을 명확히 연결하여 오류의 가능성을 줄인다.

또한, JSON을 사용한 함수 호출은 시스템 간의 상호 운용성을 크게 향상시킨다. 많은 프로그래밍 언어와 플랫폼이 JSON을 기본적으로 지원하기 때문에, 다양한 환경에서 쉽게 통합될 수 있다. 웹 기반 애플리케이션이나 마이크로서비스 아키텍처에서 중요하며, API 통신의 표준으로 자리 잡았다. 결과적으로, JSON을 통한 함수 호출은 개발 과정을 간소화하고, 시스템의 유지보수성과 확장성을 향상시키는 데 크게 기여한다.

## 헬로월드

함수 호출 헬로월드 프로그램은 OpenAI의 GPT 모델을 사용하여 간단한 인사 기능을 구현했다. 프로그램은 먼저 `hello_world`라는 함수를 정의하고, 이 함수의 설명을 OpenAI API에 제공한 다음, 사용자의 입력을 API에 전송하면, GPT 모델이 이를 해석하여 적절한 함수 호출을 결정한다. API가 `hello_world` 함수 호출을 요청하면, 프로그램은 이 함수를 실행하여 개인화된 인사말을 생성하고 출력합니다.

```{python}
from openai import OpenAI
import os
from dotenv import load_dotenv
import json

load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


# 간단한 함수 정의
def hello_world(name):
    return f"안녕하세요, {name}님!"


# OpenAI에 제공할 함수 설명
functions = [
    {
        "name": "hello_world",
        "description": "이름을 받아 인사말을 반환하는 함수",
        "parameters": {
            "type": "object",
            "properties": {"name": {"type": "string", "description": "사용자의 이름"}},
            "required": ["name"],
        },
    }
]

# OpenAI API 호출
response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[{"role": "user", "content": "내 이름은 홍길동이야. 인사해줘."}],
    functions=functions,
    function_call="auto",
)

# 응답 처리 및 함수 실행
message = response.choices[0].message
if message.function_call:
    function_args = json.loads(message.function_call.arguments)
    result = hello_world(function_args["name"])
    print(result)
```

## 날씨 API

날씨 API 호출 코드는 OpenAI의 GPT 모델과 OpenWeatherMap API를 결합하여 사용자의 날씨 관련 질문에 답한다. 먼저 OpenWeatherMap API를 사용하여 특정 도시의 날씨 정보를 가져오는 `get_weather` 함수를 정의했다. 그 다음 이 함수의 설명을 OpenAI API에 제공하고, 사용자의 자연어 입력을 처리하도록 GPT 모델에 요청했다. GPT 모델은 사용자의 질문을 해석하여 적절한 도시 이름을 추출하고 `get_weather` 함수를 호출했다. 마지막으로 함수의 반환값을 출력하여 사용자에게 현재 날씨 정보를 제공했다. 이 과정을 통해 자연어 처리와 실시간 데이터 조회를 결합한 실용적인 AI 애플리케이션의 기본 구조를 구현했다.

```{python}
from openai import OpenAI
import requests
import os
from dotenv import load_dotenv

# 환경 변수 로드
load_dotenv()

# OpenAI 및 OpenWeatherMap API 키 설정
openai_api_key = os.getenv("OPENAI_API_KEY")
weather_api_key = os.getenv("OPENWEATHER_API_KEY")

# OpenAI 클라이언트 초기화
client = OpenAI(api_key=openai_api_key)

def get_weather(city):
    """OpenWeatherMap API를 사용하여 날씨 정보를 가져오는 함수"""
    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {"q": city, "appid": weather_api_key, "units": "metric"}  # 섭씨 온도 사용
    response = requests.get(base_url, params=params)
    if response.status_code == 200:
        data = response.json()
        weather_desc = data["weather"][0]["description"]
        temp = data["main"]["temp"]
        return f"{city}의 현재 날씨는 {weather_desc}이며, 기온은 {temp}°C 입니다."
    else:
        return "날씨 정보를 가져오는데 실패했습니다."


# OpenAI에 제공할 함수 설명
functions = [
    {
        "name": "get_weather",
        "description": "특정 도시의 현재 날씨 정보를 가져오는 함수",
        "parameters": {
            "type": "object",
            "properties": {
                "city": {"type": "string", "description": "날씨를 알고싶은 도시 이름"}
            },
            "required": ["city"],
        },
    }
]

# 사용자 입력 처리 및 함수 호출
user_input = "속초시 오늘 날씨 어때?"
response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[{"role": "user", "content": user_input}],
    functions=functions,
    function_call="auto",
)

# 응답 처리 및 함수 실행
message = response.choices[0].message
if message.function_call:
    function_args = eval(message.function_call.arguments)
    result = get_weather(function_args["city"])
    print(result)
else:
    print(message.content)
```

